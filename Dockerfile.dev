ARG NODE_VERSION=20.3.0

############
# GIT-DATA #
############
FROM --platform=${BUILDPLATFORM:-amd64} node:${NODE_VERSION}-alpine as git-data

WORKDIR /usr/src/app
RUN apk add --no-cache git

COPY .git .git
COPY dappnode_package.json .
COPY docker/getGitData.js .

RUN node getGitData /usr/src/app/.git-data.json

##################
# BUILD-BINARIES #
##################
FROM --platform=${BUILDPLATFORM:-amd64} node:${NODE_VERSION}-alpine as build-binaries

RUN apk add --no-cache bind-tools docker curl
RUN curl -L https://github.com/docker/compose/releases/download/v2.5.0/docker-compose-linux-$(uname -m) > /usr/local/bin/docker-compose \
  && chmod +x /usr/local/bin/docker-compose

# Common base so it's cached
# --platform=$BUILDPLATFORM is used build javascript source with host arch
# Otherwise webpack builds on emulated archs can be extremely slow (+1h)

############################
# BUILD-SRC AND PRODUCTION #
############################
FROM --platform=${BUILDPLATFORM:-amd64} node:${NODE_VERSION}-alpine as build-src

ENV COMPOSE_HTTP_TIMEOUT=300 \
  DOCKER_CLIENT_TIMEOUT=300 \
  DOCKER_HOST=unix:///var/run/docker.sock \
  UI_FILES_PATH=/app/packages/admin-ui/build \
  GIT_DATA_PATH=.git-data.json \
  TEST=true \
  REACT_APP_API_URL=http://172.33.1.7:5000/

WORKDIR /app
RUN apk add --no-cache python3 build-base bash git bind-tools docker \
  curl bind-dev xz libltdl miniupnpc zip unzip dbus bind tmux avahi-tools

# Build the src code:
# Copy and install deps first to cache
COPY package.json yarn.lock lerna.json tsconfig.json ./
RUN yarn --frozen-lockfile --non-interactive --ignore-scripts --ignore-optional
COPY packages/admin-ui/package.json \ 
  packages/admin-ui/
COPY packages/dappmanager/package.json \ 
  packages/dappmanager/
COPY packages/common/package.json \ 
  packages/common/
COPY packages/params/package.json \ 
  packages/params/
COPY packages/utils/package.json \ 
  packages/utils/
COPY packages/eventBus/package.json \ 
  packages/eventBus/
COPY packages/logger/package.json \ 
  packages/logger/
COPY packages/dockerCompose/package.json \ 
  packages/dockerCompose/
COPY packages/dockerApi/package.json \ 
  packages/dockerApi/
COPY packages/hostScriptsServices/package.json \
  packages/hostScriptsServices/
COPY packages/db/package.json \
  packages/db/
COPY packages/manifest/package.json \
  packages/manifest/
COPY packages/ipfs/package.json \
  packages/ipfs/
COPY packages/installer/package.json \
  packages/installer/
COPY packages/ethicalMetrics/package.json \
  packages/ethicalMetrics/
COPY packages/httpsPortal/package.json \
  packages/httpsPortal/
COPY packages/dyndns/package.json \
  packages/dyndns/
COPY packages/upnpc/package.json \
  packages/upnpc/
COPY packages/stakers/package.json \
  packages/stakers/
COPY packages/optimism/package.json \
  packages/optimism/
RUN yarn --frozen-lockfile --non-interactive --ignore-optional

# Build params
WORKDIR /app/packages/params/
COPY packages/params/ .
RUN yarn build
# Results in dist/*

# Build ethicalmetrics
WORKDIR /app/packages/ethicalMetrics/
COPY packages/ethicalMetrics/ .
RUN yarn build
# Results in dist/*

# Build common
WORKDIR /app/packages/common/
COPY packages/common/ .
RUN yarn build
# Results in dist/*

# Build utils
WORKDIR /app/packages/utils/
COPY packages/utils/ .
RUN yarn build
# Results in dist/*

# Build eventBus
WORKDIR /app/packages/eventBus/
COPY packages/eventBus/ .
RUN yarn build
# Results in dist/*

# Build logger
WORKDIR /app/packages/logger/
COPY packages/logger/ .
RUN yarn build
# Results in dist/*

# Build dockerCompose
WORKDIR /app/packages/dockerCompose/
COPY packages/dockerCompose/ .
RUN yarn build
# Results in dist/*

# Build hostScriptsServices
WORKDIR /app/packages/hostScriptsServices/
COPY packages/hostScriptsServices/ .
RUN yarn build
# Results in dist/*

# Build manifest
WORKDIR /app/packages/manifest/
COPY packages/manifest/ .
RUN yarn build
# Results in dist/*

# Build dockerApi
WORKDIR /app/packages/dockerApi/
COPY packages/dockerApi/ .
RUN yarn build
# Results in dist/*

# Build upnpc
WORKDIR /app/packages/upnpc/
COPY packages/upnpc/ .
RUN yarn build
# Results in dist/*

# Build httpsportal
WORKDIR /app/packages/httpsPortal/
COPY packages/httpsPortal/ .
RUN yarn build
# Results in dist/*

# Build db
WORKDIR /app/packages/db/
COPY packages/db/ .
RUN yarn build
# Results in dist/*

# Build ipfs
WORKDIR /app/packages/ipfs/
COPY packages/ipfs/ .
RUN yarn build
# Results in dist/*

# Build dyndns
WORKDIR /app/packages/dyndns/
COPY packages/dyndns/ .
RUN yarn build
# Results in dist/*

# Build installer
WORKDIR /app/packages/installer/
COPY packages/installer/ .
RUN yarn build
# Results in dist/*

# Build optimism
WORKDIR /app/packages/optimism/
COPY packages/optimism/ .
RUN yarn build
# Results in dist/*

# Build stakers
WORKDIR /app/packages/stakers/
COPY packages/stakers/ .
RUN yarn build
# Results in dist/*

# Build dappmanager
WORKDIR /app/packages/dappmanager/
COPY packages/dappmanager/ .
RUN yarn build
# Results in dist/*

# Build admin-ui
WORKDIR /app/packages/admin-ui/
COPY packages/admin-ui/ .
ENV REACT_APP_API_URL /
RUN yarn build
# Results in build/*

# Copy docker
COPY docker/rndc.conf /etc/bind/
COPY docker/update_local_dyndns.sh /usr/local/bin/update_local_dyndns

# Copy git data
COPY --from=git-data /usr/src/app/.git-data.json $GIT_DATA_PATH

# Copy binaries
COPY --from=build-binaries /usr/bin/nsupdate /usr/bin/nsupdate
COPY --from=build-binaries /usr/bin/docker /usr/bin/docker
COPY --from=build-binaries /usr/local/bin/docker-compose /usr/local/bin/docker-compose

# Copy the src last as it's the layer most likely to change
COPY packages/hostScriptsServices/hostScriptsServices /usr/src/app/hostScriptsServices

COPY docker/rndc.conf /etc/bind/
COPY docker/update_local_dyndns.sh /usr/local/bin/update_local_dyndns

WORKDIR /app
COPY docker/start_dev.sh /usr/src/app/start_dev.sh
ENTRYPOINT [ "/usr/src/app/start_dev.sh" ]