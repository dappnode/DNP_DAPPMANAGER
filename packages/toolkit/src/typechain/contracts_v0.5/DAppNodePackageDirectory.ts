/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export interface DAppNodePackageDirectoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "changeHatchEscapeCaller"
      | "changeOwnership"
      | "escapeHatch"
      | "escapeHatchCaller"
      | "escapeHatchDestination"
      | "featured"
      | "isTokenEscapable"
      | "newOwnerCandidate"
      | "owner"
      | "proposeOwnership"
      | "removeOwnership"
      | "addPackage"
      | "updatePackage"
      | "changeStatus"
      | "changePosition"
      | "switchPosition"
      | "changeFeatured"
      | "getPackage"
      | "numberOfDAppNodePackages"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EscapeHatchBlackistedToken"
      | "EscapeHatchCalled"
      | "FeaturedChanged"
      | "OwnershipRemoved"
      | "OwnershipRequested"
      | "OwnershipTransferred"
      | "PackageAdded"
      | "PackageUpdated"
      | "PositionChanged"
      | "StatusChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeHatchEscapeCaller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "escapeHatch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "escapeHatchCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escapeHatchDestination",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "featured", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTokenEscapable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newOwnerCandidate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addPackage",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePackage",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "switchPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeatured",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPackage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfDAppNodePackages",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeHatchEscapeCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escapeHatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escapeHatchCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escapeHatchDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "featured", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenEscapable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOwnerCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPackage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFeatured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPackage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfDAppNodePackages",
    data: BytesLike
  ): Result;
}

export namespace EscapeHatchBlackistedTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscapeHatchCalledEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeaturedChangedEvent {
  export type InputTuple = [newFeatured: BytesLike];
  export type OutputTuple = [newFeatured: string];
  export interface OutputObject {
    newFeatured: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipRemovedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipRequestedEvent {
  export type InputTuple = [by: AddressLike, to: AddressLike];
  export type OutputTuple = [by: string, to: string];
  export interface OutputObject {
    by: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PackageAddedEvent {
  export type InputTuple = [idPackage: BigNumberish, name: string];
  export type OutputTuple = [idPackage: bigint, name: string];
  export interface OutputObject {
    idPackage: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PackageUpdatedEvent {
  export type InputTuple = [idPackage: BigNumberish, name: string];
  export type OutputTuple = [idPackage: bigint, name: string];
  export interface OutputObject {
    idPackage: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionChangedEvent {
  export type InputTuple = [idPackage: BigNumberish, newPosition: BigNumberish];
  export type OutputTuple = [idPackage: bigint, newPosition: bigint];
  export interface OutputObject {
    idPackage: bigint;
    newPosition: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StatusChangedEvent {
  export type InputTuple = [idPackage: BigNumberish, newStatus: BigNumberish];
  export type OutputTuple = [idPackage: bigint, newStatus: bigint];
  export interface OutputObject {
    idPackage: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DAppNodePackageDirectory extends BaseContract {
  connect(runner?: ContractRunner | null): DAppNodePackageDirectory;
  waitForDeployment(): Promise<this>;

  interface: DAppNodePackageDirectoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership
   */
  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * Changes the address assigned to call `escapeHatch()`
   * @param _newEscapeHatchCaller The address of a trusted account or  contract to call `escapeHatch()` to send the value in this contract to  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`  cannot move funds out of `escapeHatchDestination`
   */
  changeHatchEscapeCaller: TypedContractMethod<
    [_newEscapeHatchCaller: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`
   * `owner` can step down and assign some other address to this role
   * @param _newOwner The address of the new owner
   */
  changeOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * The `escapeHatch()` should only be called as a last resort if a security issue is uncovered or something unexpected happened
   * @param _token to transfer, use 0x0 for ether
   */
  escapeHatch: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  escapeHatchCaller: TypedContractMethod<[], [string], "view">;

  escapeHatchDestination: TypedContractMethod<[], [string], "view">;

  featured: TypedContractMethod<[], [string], "view">;

  /**
   * Checks to see if `_token` is in the blacklist of tokens
   * @param _token the token address being queried
   * @returns False if `_token` is in the blacklist and can't be taken out of  the contract via the `escapeHatch()`
   */
  isTokenEscapable: TypedContractMethod<
    [_token: AddressLike],
    [boolean],
    "view"
  >;

  newOwnerCandidate: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  /**
   * In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`
   * `onlyOwner` Proposes to transfer control of the contract to a  new owner
   * @param _newOwnerCandidate The address being proposed as the new owner
   */
  proposeOwnership: TypedContractMethod<
    [_newOwnerCandidate: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use
   * Decentralizes the contract, this operation cannot be undone
   * @param _dac `0xdac` has to be entered for this function to work
   */
  removeOwnership: TypedContractMethod<
    [_dac: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Add a new DAppNode package
   * @param name the ENS name of the package
   * @param position to order the packages in the UI
   * @param status status of the package
   * @returns the idPackage of the new package
   */
  addPackage: TypedContractMethod<
    [name: string, status: BigNumberish, position: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  /**
   * Update a DAppNode package
   * @param idPackage the id of the package to be changed
   * @param name the new ENS name of the package
   * @param position to order the packages in the UI
   * @param status status of the package
   */
  updatePackage: TypedContractMethod<
    [
      idPackage: BigNumberish,
      name: string,
      status: BigNumberish,
      position: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  /**
   * Change the status of a DAppNode package
   * @param idPackage the id of the package to be changed
   * @param newStatus the new status of the package
   */
  changeStatus: TypedContractMethod<
    [idPackage: BigNumberish, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Change the status of a DAppNode package
   * @param idPackage the id of the package to be changed
   * @param newPosition position to order the packages in the UI
   */
  changePosition: TypedContractMethod<
    [idPackage: BigNumberish, newPosition: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Switch the positio of two DAppNode packages
   * @param idPackage1 the id of the package to be switched
   * @param idPackage2 the id of the package to be switched
   */
  switchPosition: TypedContractMethod<
    [idPackage1: BigNumberish, idPackage2: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Change the list of featured packages
   * @param _featured List of the ids of the featured packages if needed ids [5,43]: _featured = 0x052b0000000000000...
   */
  changeFeatured: TypedContractMethod<
    [_featured: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the information of a DAppNode package
   * @param idPackage the id of the package to be changed
   * @returns name the new name of the packagestatus the status of the package
   */
  getPackage: TypedContractMethod<
    [idPackage: BigNumberish],
    [
      [string, bigint, bigint] & {
        name: string;
        status: bigint;
        position: bigint;
      }
    ],
    "view"
  >;

  /**
   * its goal is to return the total number of DAppNode packages
   * @returns the total number of DAppNode packages
   */
  numberOfDAppNodePackages: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeHatchEscapeCaller"
  ): TypedContractMethod<
    [_newEscapeHatchCaller: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "escapeHatch"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "escapeHatchCaller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "escapeHatchDestination"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "featured"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isTokenEscapable"
  ): TypedContractMethod<[_token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "newOwnerCandidate"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposeOwnership"
  ): TypedContractMethod<
    [_newOwnerCandidate: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeOwnership"
  ): TypedContractMethod<[_dac: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addPackage"
  ): TypedContractMethod<
    [name: string, status: BigNumberish, position: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePackage"
  ): TypedContractMethod<
    [
      idPackage: BigNumberish,
      name: string,
      status: BigNumberish,
      position: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeStatus"
  ): TypedContractMethod<
    [idPackage: BigNumberish, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changePosition"
  ): TypedContractMethod<
    [idPackage: BigNumberish, newPosition: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "switchPosition"
  ): TypedContractMethod<
    [idPackage1: BigNumberish, idPackage2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeFeatured"
  ): TypedContractMethod<[_featured: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPackage"
  ): TypedContractMethod<
    [idPackage: BigNumberish],
    [
      [string, bigint, bigint] & {
        name: string;
        status: bigint;
        position: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "numberOfDAppNodePackages"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "EscapeHatchBlackistedToken"
  ): TypedContractEvent<
    EscapeHatchBlackistedTokenEvent.InputTuple,
    EscapeHatchBlackistedTokenEvent.OutputTuple,
    EscapeHatchBlackistedTokenEvent.OutputObject
  >;
  getEvent(
    key: "EscapeHatchCalled"
  ): TypedContractEvent<
    EscapeHatchCalledEvent.InputTuple,
    EscapeHatchCalledEvent.OutputTuple,
    EscapeHatchCalledEvent.OutputObject
  >;
  getEvent(
    key: "FeaturedChanged"
  ): TypedContractEvent<
    FeaturedChangedEvent.InputTuple,
    FeaturedChangedEvent.OutputTuple,
    FeaturedChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipRemoved"
  ): TypedContractEvent<
    OwnershipRemovedEvent.InputTuple,
    OwnershipRemovedEvent.OutputTuple,
    OwnershipRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipRequested"
  ): TypedContractEvent<
    OwnershipRequestedEvent.InputTuple,
    OwnershipRequestedEvent.OutputTuple,
    OwnershipRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PackageAdded"
  ): TypedContractEvent<
    PackageAddedEvent.InputTuple,
    PackageAddedEvent.OutputTuple,
    PackageAddedEvent.OutputObject
  >;
  getEvent(
    key: "PackageUpdated"
  ): TypedContractEvent<
    PackageUpdatedEvent.InputTuple,
    PackageUpdatedEvent.OutputTuple,
    PackageUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PositionChanged"
  ): TypedContractEvent<
    PositionChangedEvent.InputTuple,
    PositionChangedEvent.OutputTuple,
    PositionChangedEvent.OutputObject
  >;
  getEvent(
    key: "StatusChanged"
  ): TypedContractEvent<
    StatusChangedEvent.InputTuple,
    StatusChangedEvent.OutputTuple,
    StatusChangedEvent.OutputObject
  >;

  filters: {
    "EscapeHatchBlackistedToken(address)": TypedContractEvent<
      EscapeHatchBlackistedTokenEvent.InputTuple,
      EscapeHatchBlackistedTokenEvent.OutputTuple,
      EscapeHatchBlackistedTokenEvent.OutputObject
    >;
    EscapeHatchBlackistedToken: TypedContractEvent<
      EscapeHatchBlackistedTokenEvent.InputTuple,
      EscapeHatchBlackistedTokenEvent.OutputTuple,
      EscapeHatchBlackistedTokenEvent.OutputObject
    >;

    "EscapeHatchCalled(address,uint256)": TypedContractEvent<
      EscapeHatchCalledEvent.InputTuple,
      EscapeHatchCalledEvent.OutputTuple,
      EscapeHatchCalledEvent.OutputObject
    >;
    EscapeHatchCalled: TypedContractEvent<
      EscapeHatchCalledEvent.InputTuple,
      EscapeHatchCalledEvent.OutputTuple,
      EscapeHatchCalledEvent.OutputObject
    >;

    "FeaturedChanged(bytes32)": TypedContractEvent<
      FeaturedChangedEvent.InputTuple,
      FeaturedChangedEvent.OutputTuple,
      FeaturedChangedEvent.OutputObject
    >;
    FeaturedChanged: TypedContractEvent<
      FeaturedChangedEvent.InputTuple,
      FeaturedChangedEvent.OutputTuple,
      FeaturedChangedEvent.OutputObject
    >;

    "OwnershipRemoved()": TypedContractEvent<
      OwnershipRemovedEvent.InputTuple,
      OwnershipRemovedEvent.OutputTuple,
      OwnershipRemovedEvent.OutputObject
    >;
    OwnershipRemoved: TypedContractEvent<
      OwnershipRemovedEvent.InputTuple,
      OwnershipRemovedEvent.OutputTuple,
      OwnershipRemovedEvent.OutputObject
    >;

    "OwnershipRequested(address,address)": TypedContractEvent<
      OwnershipRequestedEvent.InputTuple,
      OwnershipRequestedEvent.OutputTuple,
      OwnershipRequestedEvent.OutputObject
    >;
    OwnershipRequested: TypedContractEvent<
      OwnershipRequestedEvent.InputTuple,
      OwnershipRequestedEvent.OutputTuple,
      OwnershipRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PackageAdded(uint256,string)": TypedContractEvent<
      PackageAddedEvent.InputTuple,
      PackageAddedEvent.OutputTuple,
      PackageAddedEvent.OutputObject
    >;
    PackageAdded: TypedContractEvent<
      PackageAddedEvent.InputTuple,
      PackageAddedEvent.OutputTuple,
      PackageAddedEvent.OutputObject
    >;

    "PackageUpdated(uint256,string)": TypedContractEvent<
      PackageUpdatedEvent.InputTuple,
      PackageUpdatedEvent.OutputTuple,
      PackageUpdatedEvent.OutputObject
    >;
    PackageUpdated: TypedContractEvent<
      PackageUpdatedEvent.InputTuple,
      PackageUpdatedEvent.OutputTuple,
      PackageUpdatedEvent.OutputObject
    >;

    "PositionChanged(uint256,uint128)": TypedContractEvent<
      PositionChangedEvent.InputTuple,
      PositionChangedEvent.OutputTuple,
      PositionChangedEvent.OutputObject
    >;
    PositionChanged: TypedContractEvent<
      PositionChangedEvent.InputTuple,
      PositionChangedEvent.OutputTuple,
      PositionChangedEvent.OutputObject
    >;

    "StatusChanged(uint256,uint128)": TypedContractEvent<
      StatusChangedEvent.InputTuple,
      StatusChangedEvent.OutputTuple,
      StatusChangedEvent.OutputObject
    >;
    StatusChanged: TypedContractEvent<
      StatusChangedEvent.InputTuple,
      StatusChangedEvent.OutputTuple,
      StatusChangedEvent.OutputObject
    >;
  };
}
