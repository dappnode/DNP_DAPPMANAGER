/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export interface EVMScriptRegistryFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "baseReg"
      | "baseDeployDel"
      | "EVMSCRIPT_REGISTRY_APP_ID"
      | "EVMSCRIPT_REGISTRY_APP"
      | "baseCalls"
      | "newAppProxyPinned(address,bytes32,bytes)"
      | "newAppProxyPinned(address,bytes32)"
      | "newAppProxy(address,bytes32)"
      | "newAppProxy(address,bytes32,bytes)"
      | "baseDel"
      | "newEVMScriptRegistry"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewAppProxy"): EventFragment;

  encodeFunctionData(functionFragment: "baseReg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseDeployDel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVMSCRIPT_REGISTRY_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVMSCRIPT_REGISTRY_APP",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseCalls", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newAppProxyPinned(address,bytes32,bytes)",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxyPinned(address,bytes32)",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxy(address,bytes32)",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxy(address,bytes32,bytes)",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "baseDel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newEVMScriptRegistry",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "baseReg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseDeployDel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVMSCRIPT_REGISTRY_APP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVMSCRIPT_REGISTRY_APP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseCalls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxyPinned(address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxyPinned(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxy(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxy(address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseDel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newEVMScriptRegistry",
    data: BytesLike
  ): Result;
}

export namespace NewAppProxyEvent {
  export type InputTuple = [proxy: AddressLike];
  export type OutputTuple = [proxy: string];
  export interface OutputObject {
    proxy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EVMScriptRegistryFactory extends BaseContract {
  connect(runner?: ContractRunner | null): EVMScriptRegistryFactory;
  waitForDeployment(): Promise<this>;

  interface: EVMScriptRegistryFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  baseReg: TypedContractMethod<[], [string], "view">;

  baseDeployDel: TypedContractMethod<[], [string], "view">;

  EVMSCRIPT_REGISTRY_APP_ID: TypedContractMethod<[], [string], "view">;

  EVMSCRIPT_REGISTRY_APP: TypedContractMethod<[], [string], "view">;

  baseCalls: TypedContractMethod<[], [string], "view">;

  "newAppProxyPinned(address,bytes32,bytes)": TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike, _initializePayload: BytesLike],
    [string],
    "nonpayable"
  >;

  "newAppProxyPinned(address,bytes32)": TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike],
    [string],
    "nonpayable"
  >;

  "newAppProxy(address,bytes32)": TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike],
    [string],
    "nonpayable"
  >;

  "newAppProxy(address,bytes32,bytes)": TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike, _initializePayload: BytesLike],
    [string],
    "nonpayable"
  >;

  baseDel: TypedContractMethod<[], [string], "view">;

  newEVMScriptRegistry: TypedContractMethod<
    [_dao: AddressLike, _root: AddressLike],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "baseReg"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseDeployDel"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EVMSCRIPT_REGISTRY_APP_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EVMSCRIPT_REGISTRY_APP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseCalls"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newAppProxyPinned(address,bytes32,bytes)"
  ): TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike, _initializePayload: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newAppProxyPinned(address,bytes32)"
  ): TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newAppProxy(address,bytes32)"
  ): TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newAppProxy(address,bytes32,bytes)"
  ): TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike, _initializePayload: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "baseDel"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newEVMScriptRegistry"
  ): TypedContractMethod<
    [_dao: AddressLike, _root: AddressLike],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "NewAppProxy"
  ): TypedContractEvent<
    NewAppProxyEvent.InputTuple,
    NewAppProxyEvent.OutputTuple,
    NewAppProxyEvent.OutputObject
  >;

  filters: {
    "NewAppProxy(address)": TypedContractEvent<
      NewAppProxyEvent.InputTuple,
      NewAppProxyEvent.OutputTuple,
      NewAppProxyEvent.OutputObject
    >;
    NewAppProxy: TypedContractEvent<
      NewAppProxyEvent.InputTuple,
      NewAppProxyEvent.OutputTuple,
      NewAppProxyEvent.OutputObject
    >;
  };
}
