/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export interface IKernelInterface extends Interface {
  getFunction(
    nameOrSignature: "acl" | "hasPermission" | "setApp" | "getApp"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SetApp"): EventFragment;

  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApp",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getApp", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getApp", data: BytesLike): Result;
}

export namespace SetAppEvent {
  export type InputTuple = [
    namespace_: BytesLike,
    name: BytesLike,
    id: BytesLike,
    app: AddressLike
  ];
  export type OutputTuple = [
    namespace_: string,
    name: string,
    id: string,
    app: string
  ];
  export interface OutputObject {
    namespace: string;
    name: string;
    id: string;
    app: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IKernel extends BaseContract {
  connect(runner?: ContractRunner | null): IKernel;
  waitForDeployment(): Promise<this>;

  interface: IKernelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acl: TypedContractMethod<[], [string], "view">;

  hasPermission: TypedContractMethod<
    [who: AddressLike, where: AddressLike, what: BytesLike, how: BytesLike],
    [boolean],
    "view"
  >;

  setApp: TypedContractMethod<
    [namespace: BytesLike, name: BytesLike, app: AddressLike],
    [string],
    "nonpayable"
  >;

  getApp: TypedContractMethod<[id: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasPermission"
  ): TypedContractMethod<
    [who: AddressLike, where: AddressLike, what: BytesLike, how: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "setApp"
  ): TypedContractMethod<
    [namespace: BytesLike, name: BytesLike, app: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApp"
  ): TypedContractMethod<[id: BytesLike], [string], "view">;

  getEvent(
    key: "SetApp"
  ): TypedContractEvent<
    SetAppEvent.InputTuple,
    SetAppEvent.OutputTuple,
    SetAppEvent.OutputObject
  >;

  filters: {
    "SetApp(bytes32,bytes32,bytes32,address)": TypedContractEvent<
      SetAppEvent.InputTuple,
      SetAppEvent.OutputTuple,
      SetAppEvent.OutputObject
    >;
    SetApp: TypedContractEvent<
      SetAppEvent.InputTuple,
      SetAppEvent.OutputTuple,
      SetAppEvent.OutputObject
    >;
  };
}
