/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export interface ENSFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PUBLIC_RESOLVER_NODE"
      | "ETH_TLD_LABEL"
      | "ENS_ROOT"
      | "PUBLIC_RESOLVER_LABEL"
      | "ETH_TLD_NODE"
      | "newENS"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DeployENS"): EventFragment;

  encodeFunctionData(
    functionFragment: "PUBLIC_RESOLVER_NODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETH_TLD_LABEL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ENS_ROOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PUBLIC_RESOLVER_LABEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETH_TLD_NODE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newENS", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "PUBLIC_RESOLVER_NODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETH_TLD_LABEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ENS_ROOT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PUBLIC_RESOLVER_LABEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETH_TLD_NODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newENS", data: BytesLike): Result;
}

export namespace DeployENSEvent {
  export type InputTuple = [ens: AddressLike];
  export type OutputTuple = [ens: string];
  export interface OutputObject {
    ens: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ENSFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ENSFactory;
  waitForDeployment(): Promise<this>;

  interface: ENSFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PUBLIC_RESOLVER_NODE: TypedContractMethod<[], [string], "view">;

  ETH_TLD_LABEL: TypedContractMethod<[], [string], "view">;

  ENS_ROOT: TypedContractMethod<[], [string], "view">;

  PUBLIC_RESOLVER_LABEL: TypedContractMethod<[], [string], "view">;

  ETH_TLD_NODE: TypedContractMethod<[], [string], "view">;

  newENS: TypedContractMethod<[_owner: AddressLike], [string], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PUBLIC_RESOLVER_NODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ETH_TLD_LABEL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ENS_ROOT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PUBLIC_RESOLVER_LABEL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ETH_TLD_NODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newENS"
  ): TypedContractMethod<[_owner: AddressLike], [string], "nonpayable">;

  getEvent(
    key: "DeployENS"
  ): TypedContractEvent<
    DeployENSEvent.InputTuple,
    DeployENSEvent.OutputTuple,
    DeployENSEvent.OutputObject
  >;

  filters: {
    "DeployENS(address)": TypedContractEvent<
      DeployENSEvent.InputTuple,
      DeployENSEvent.OutputTuple,
      DeployENSEvent.OutputObject
    >;
    DeployENS: TypedContractEvent<
      DeployENSEvent.InputTuple,
      DeployENSEvent.OutputTuple,
      DeployENSEvent.OutputObject
    >;
  };
}
