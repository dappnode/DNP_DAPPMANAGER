/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export interface KernelInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "KERNEL_APP_ID"
      | "APP_ADDR_NAMESPACE"
      | "KERNEL_APP"
      | "apps"
      | "CORE_NAMESPACE"
      | "appId"
      | "getInitializationBlock"
      | "APP_MANAGER_ROLE"
      | "ACL_APP"
      | "ACL_APP_ID"
      | "newAppProxyPinned(address,bytes32,bytes)"
      | "newAppProxyPinned(address,bytes32)"
      | "kernel"
      | "APP_BASES_NAMESPACE"
      | "newAppProxy(address,bytes32)"
      | "newAppProxy(address,bytes32,bytes)"
      | "initialize"
      | "newAppInstance"
      | "newPinnedAppInstance"
      | "setApp"
      | "getApp"
      | "acl"
      | "hasPermission"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewAppProxy" | "SetApp"): EventFragment;

  encodeFunctionData(
    functionFragment: "KERNEL_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "APP_ADDR_NAMESPACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KERNEL_APP",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "apps", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "CORE_NAMESPACE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "APP_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ACL_APP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ACL_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxyPinned(address,bytes32,bytes)",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxyPinned(address,bytes32)",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "APP_BASES_NAMESPACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxy(address,bytes32)",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxy(address,bytes32,bytes)",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newAppInstance",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newPinnedAppInstance",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApp",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getApp", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "KERNEL_APP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "APP_ADDR_NAMESPACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "KERNEL_APP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "apps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CORE_NAMESPACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "APP_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ACL_APP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ACL_APP_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxyPinned(address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxyPinned(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "APP_BASES_NAMESPACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxy(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxy(address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newAppInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newPinnedAppInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
}

export namespace NewAppProxyEvent {
  export type InputTuple = [proxy: AddressLike];
  export type OutputTuple = [proxy: string];
  export interface OutputObject {
    proxy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAppEvent {
  export type InputTuple = [
    namespace_: BytesLike,
    name: BytesLike,
    id: BytesLike,
    app: AddressLike
  ];
  export type OutputTuple = [
    namespace_: string,
    name: string,
    id: string,
    app: string
  ];
  export interface OutputObject {
    namespace: string;
    name: string;
    id: string;
    app: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Kernel extends BaseContract {
  connect(runner?: ContractRunner | null): Kernel;
  waitForDeployment(): Promise<this>;

  interface: KernelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  KERNEL_APP_ID: TypedContractMethod<[], [string], "view">;

  APP_ADDR_NAMESPACE: TypedContractMethod<[], [string], "view">;

  KERNEL_APP: TypedContractMethod<[], [string], "view">;

  apps: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  CORE_NAMESPACE: TypedContractMethod<[], [string], "view">;

  appId: TypedContractMethod<[], [string], "view">;

  /**
   * @returns Block number in which the contract was initialized
   */
  getInitializationBlock: TypedContractMethod<[], [bigint], "view">;

  APP_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  ACL_APP: TypedContractMethod<[], [string], "view">;

  ACL_APP_ID: TypedContractMethod<[], [string], "view">;

  "newAppProxyPinned(address,bytes32,bytes)": TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike, _initializePayload: BytesLike],
    [string],
    "nonpayable"
  >;

  "newAppProxyPinned(address,bytes32)": TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike],
    [string],
    "nonpayable"
  >;

  kernel: TypedContractMethod<[], [string], "view">;

  APP_BASES_NAMESPACE: TypedContractMethod<[], [string], "view">;

  "newAppProxy(address,bytes32)": TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike],
    [string],
    "nonpayable"
  >;

  "newAppProxy(address,bytes32,bytes)": TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike, _initializePayload: BytesLike],
    [string],
    "nonpayable"
  >;

  /**
   * Initialize can only be called once. It saves the block number in which it was initialized.
   * Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions
   * @param _baseAcl Address of base ACL app
   * @param _permissionsCreator Entity that will be given permission over createPermission
   */
  initialize: TypedContractMethod<
    [_baseAcl: AddressLike, _permissionsCreator: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Create a new instance of an app linked to this kernel and set its base     implementation if it was not already set
   * @param _appBase Address of the app's base implementation
   * @param _name Name of the app
   * @returns AppProxy instance
   */
  newAppInstance: TypedContractMethod<
    [_name: BytesLike, _appBase: AddressLike],
    [string],
    "nonpayable"
  >;

  /**
   * Create a new pinned instance of an app linked to this kernel and set     its base implementation if it was not already set
   * @param _appBase Address of the app's base implementation
   * @param _name Name of the app
   * @returns AppProxy instance
   */
  newPinnedAppInstance: TypedContractMethod<
    [_name: BytesLike, _appBase: AddressLike],
    [string],
    "nonpayable"
  >;

  /**
   * Set the resolving address of an app instance or base implementation
   * @param _app Address of the app
   * @param _name Name of the app
   * @param _namespace App namespace to use
   * @returns ID of app
   */
  setApp: TypedContractMethod<
    [_namespace: BytesLike, _name: BytesLike, _app: AddressLike],
    [string],
    "nonpayable"
  >;

  /**
   * Get the address of an app instance or base implementation
   * @param _id App identifier
   * @returns Address of the app
   */
  getApp: TypedContractMethod<[_id: BytesLike], [string], "view">;

  /**
   * Get the installed ACL app
   * @returns ACL app
   */
  acl: TypedContractMethod<[], [string], "view">;

  /**
   * Function called by apps to check ACL on kernel or to check permission status
   * @param _how Extra data for ACL auth
   * @param _what Identifier for a group of actions in app
   * @param _where Address of the app
   * @param _who Sender of the original call
   * @returns boolean indicating whether the ACL allows the role or not
   */
  hasPermission: TypedContractMethod<
    [_who: AddressLike, _where: AddressLike, _what: BytesLike, _how: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "KERNEL_APP_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "APP_ADDR_NAMESPACE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "KERNEL_APP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "apps"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "CORE_NAMESPACE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "appId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getInitializationBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "APP_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ACL_APP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ACL_APP_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newAppProxyPinned(address,bytes32,bytes)"
  ): TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike, _initializePayload: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newAppProxyPinned(address,bytes32)"
  ): TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "kernel"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "APP_BASES_NAMESPACE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newAppProxy(address,bytes32)"
  ): TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newAppProxy(address,bytes32,bytes)"
  ): TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike, _initializePayload: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_baseAcl: AddressLike, _permissionsCreator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newAppInstance"
  ): TypedContractMethod<
    [_name: BytesLike, _appBase: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newPinnedAppInstance"
  ): TypedContractMethod<
    [_name: BytesLike, _appBase: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApp"
  ): TypedContractMethod<
    [_namespace: BytesLike, _name: BytesLike, _app: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApp"
  ): TypedContractMethod<[_id: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "acl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasPermission"
  ): TypedContractMethod<
    [_who: AddressLike, _where: AddressLike, _what: BytesLike, _how: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "NewAppProxy"
  ): TypedContractEvent<
    NewAppProxyEvent.InputTuple,
    NewAppProxyEvent.OutputTuple,
    NewAppProxyEvent.OutputObject
  >;
  getEvent(
    key: "SetApp"
  ): TypedContractEvent<
    SetAppEvent.InputTuple,
    SetAppEvent.OutputTuple,
    SetAppEvent.OutputObject
  >;

  filters: {
    "NewAppProxy(address)": TypedContractEvent<
      NewAppProxyEvent.InputTuple,
      NewAppProxyEvent.OutputTuple,
      NewAppProxyEvent.OutputObject
    >;
    NewAppProxy: TypedContractEvent<
      NewAppProxyEvent.InputTuple,
      NewAppProxyEvent.OutputTuple,
      NewAppProxyEvent.OutputObject
    >;

    "SetApp(bytes32,bytes32,bytes32,address)": TypedContractEvent<
      SetAppEvent.InputTuple,
      SetAppEvent.OutputTuple,
      SetAppEvent.OutputObject
    >;
    SetApp: TypedContractEvent<
      SetAppEvent.InputTuple,
      SetAppEvent.OutputTuple,
      SetAppEvent.OutputObject
    >;
  };
}
