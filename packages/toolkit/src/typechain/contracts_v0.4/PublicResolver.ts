/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export interface PublicResolverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "supportsInterface"
      | "addr"
      | "setAddr"
      | "content"
      | "setContent"
      | "name"
      | "setName"
      | "ABI"
      | "setABI"
      | "pubkey"
      | "setPubkey"
      | "text"
      | "setText"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddrChanged"
      | "ContentChanged"
      | "NameChanged"
      | "ABIChanged"
      | "PubkeyChanged"
      | "TextChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "addr", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setAddr",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "content", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setContent",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ABI",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setABI",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pubkey", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setPubkey",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "text",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setText",
    values: [BytesLike, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "content", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setContent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ABI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setABI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pubkey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPubkey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "text", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setText", data: BytesLike): Result;
}

export namespace AddrChangedEvent {
  export type InputTuple = [node: BytesLike, a: AddressLike];
  export type OutputTuple = [node: string, a: string];
  export interface OutputObject {
    node: string;
    a: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContentChangedEvent {
  export type InputTuple = [node: BytesLike, hash: BytesLike];
  export type OutputTuple = [node: string, hash: string];
  export interface OutputObject {
    node: string;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameChangedEvent {
  export type InputTuple = [node: BytesLike, name: string];
  export type OutputTuple = [node: string, name: string];
  export interface OutputObject {
    node: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ABIChangedEvent {
  export type InputTuple = [node: BytesLike, contentType: BigNumberish];
  export type OutputTuple = [node: string, contentType: bigint];
  export interface OutputObject {
    node: string;
    contentType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PubkeyChangedEvent {
  export type InputTuple = [node: BytesLike, x: BytesLike, y: BytesLike];
  export type OutputTuple = [node: string, x: string, y: string];
  export interface OutputObject {
    node: string;
    x: string;
    y: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TextChangedEvent {
  export type InputTuple = [node: BytesLike, indexedKey: string, key: string];
  export type OutputTuple = [node: string, indexedKey: string, key: string];
  export interface OutputObject {
    node: string;
    indexedKey: string;
    key: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PublicResolver extends BaseContract {
  connect(runner?: ContractRunner | null): PublicResolver;
  waitForDeployment(): Promise<this>;

  interface: PublicResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Returns true if the resolver implements the interface specified by the provided hash.
   * @param interfaceID The ID of the interface to check for.
   * @returns True if the contract implements the requested interface.
   */
  supportsInterface: TypedContractMethod<
    [interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  /**
   * Returns the address associated with an ENS node.
   * @param node The ENS node to query.
   * @returns The associated address.
   */
  addr: TypedContractMethod<[node: BytesLike], [string], "view">;

  /**
   * Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.
   * @param addr The address to set.
   * @param node The node to update.
   */
  setAddr: TypedContractMethod<
    [node: BytesLike, addr: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the content hash associated with an ENS node. Note that this resource type is not standardized, and will likely change in future to a resource type based on multihash.
   * @param node The ENS node to query.
   * @returns The associated content hash.
   */
  content: TypedContractMethod<[node: BytesLike], [string], "view">;

  /**
   * Sets the content hash associated with an ENS node. May only be called by the owner of that node in the ENS registry. Note that this resource type is not standardized, and will likely change in future to a resource type based on multihash.
   * @param hash The content hash to set
   * @param node The node to update.
   */
  setContent: TypedContractMethod<
    [node: BytesLike, hash: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the name associated with an ENS node, for reverse records. Defined in EIP181.
   * @param node The ENS node to query.
   * @returns The associated name.
   */
  name: TypedContractMethod<[node: BytesLike], [string], "view">;

  /**
   * Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.
   * @param name The name to set.
   * @param node The node to update.
   */
  setName: TypedContractMethod<
    [node: BytesLike, name: string],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the ABI associated with an ENS node. Defined in EIP205.
   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.
   * @param node The ENS node to query
   * @returns contentType The content type of the return valuedata The ABI data
   */
  ABI: TypedContractMethod<
    [node: BytesLike, contentTypes: BigNumberish],
    [[bigint, string] & { contentType: bigint; data: string }],
    "view"
  >;

  /**
   * Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.
   * @param contentType The content type of the ABI
   * @param data The ABI data.
   * @param node The node to update.
   */
  setABI: TypedContractMethod<
    [node: BytesLike, contentType: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.
   * @param node The ENS node to query
   * @returns x, y the X and Y coordinates of the curve point for the public key.
   */
  pubkey: TypedContractMethod<
    [node: BytesLike],
    [[string, string] & { x: string; y: string }],
    "view"
  >;

  /**
   * Sets the SECP256k1 public key associated with an ENS node.
   * @param node The ENS node to query
   * @param x the X coordinate of the curve point for the public key.
   * @param y the Y coordinate of the curve point for the public key.
   */
  setPubkey: TypedContractMethod<
    [node: BytesLike, x: BytesLike, y: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the text data associated with an ENS node and key.
   * @param key The text data key to query.
   * @param node The ENS node to query.
   * @returns The associated text data.
   */
  text: TypedContractMethod<[node: BytesLike, key: string], [string], "view">;

  /**
   * Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.
   * @param key The key to set.
   * @param node The node to update.
   * @param value The text data value to set.
   */
  setText: TypedContractMethod<
    [node: BytesLike, key: string, value: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceID: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "addr"
  ): TypedContractMethod<[node: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "setAddr"
  ): TypedContractMethod<
    [node: BytesLike, addr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "content"
  ): TypedContractMethod<[node: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "setContent"
  ): TypedContractMethod<
    [node: BytesLike, hash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[node: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "setName"
  ): TypedContractMethod<[node: BytesLike, name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ABI"
  ): TypedContractMethod<
    [node: BytesLike, contentTypes: BigNumberish],
    [[bigint, string] & { contentType: bigint; data: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setABI"
  ): TypedContractMethod<
    [node: BytesLike, contentType: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pubkey"
  ): TypedContractMethod<
    [node: BytesLike],
    [[string, string] & { x: string; y: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setPubkey"
  ): TypedContractMethod<
    [node: BytesLike, x: BytesLike, y: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "text"
  ): TypedContractMethod<[node: BytesLike, key: string], [string], "view">;
  getFunction(
    nameOrSignature: "setText"
  ): TypedContractMethod<
    [node: BytesLike, key: string, value: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddrChanged"
  ): TypedContractEvent<
    AddrChangedEvent.InputTuple,
    AddrChangedEvent.OutputTuple,
    AddrChangedEvent.OutputObject
  >;
  getEvent(
    key: "ContentChanged"
  ): TypedContractEvent<
    ContentChangedEvent.InputTuple,
    ContentChangedEvent.OutputTuple,
    ContentChangedEvent.OutputObject
  >;
  getEvent(
    key: "NameChanged"
  ): TypedContractEvent<
    NameChangedEvent.InputTuple,
    NameChangedEvent.OutputTuple,
    NameChangedEvent.OutputObject
  >;
  getEvent(
    key: "ABIChanged"
  ): TypedContractEvent<
    ABIChangedEvent.InputTuple,
    ABIChangedEvent.OutputTuple,
    ABIChangedEvent.OutputObject
  >;
  getEvent(
    key: "PubkeyChanged"
  ): TypedContractEvent<
    PubkeyChangedEvent.InputTuple,
    PubkeyChangedEvent.OutputTuple,
    PubkeyChangedEvent.OutputObject
  >;
  getEvent(
    key: "TextChanged"
  ): TypedContractEvent<
    TextChangedEvent.InputTuple,
    TextChangedEvent.OutputTuple,
    TextChangedEvent.OutputObject
  >;

  filters: {
    "AddrChanged(bytes32,address)": TypedContractEvent<
      AddrChangedEvent.InputTuple,
      AddrChangedEvent.OutputTuple,
      AddrChangedEvent.OutputObject
    >;
    AddrChanged: TypedContractEvent<
      AddrChangedEvent.InputTuple,
      AddrChangedEvent.OutputTuple,
      AddrChangedEvent.OutputObject
    >;

    "ContentChanged(bytes32,bytes32)": TypedContractEvent<
      ContentChangedEvent.InputTuple,
      ContentChangedEvent.OutputTuple,
      ContentChangedEvent.OutputObject
    >;
    ContentChanged: TypedContractEvent<
      ContentChangedEvent.InputTuple,
      ContentChangedEvent.OutputTuple,
      ContentChangedEvent.OutputObject
    >;

    "NameChanged(bytes32,string)": TypedContractEvent<
      NameChangedEvent.InputTuple,
      NameChangedEvent.OutputTuple,
      NameChangedEvent.OutputObject
    >;
    NameChanged: TypedContractEvent<
      NameChangedEvent.InputTuple,
      NameChangedEvent.OutputTuple,
      NameChangedEvent.OutputObject
    >;

    "ABIChanged(bytes32,uint256)": TypedContractEvent<
      ABIChangedEvent.InputTuple,
      ABIChangedEvent.OutputTuple,
      ABIChangedEvent.OutputObject
    >;
    ABIChanged: TypedContractEvent<
      ABIChangedEvent.InputTuple,
      ABIChangedEvent.OutputTuple,
      ABIChangedEvent.OutputObject
    >;

    "PubkeyChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      PubkeyChangedEvent.InputTuple,
      PubkeyChangedEvent.OutputTuple,
      PubkeyChangedEvent.OutputObject
    >;
    PubkeyChanged: TypedContractEvent<
      PubkeyChangedEvent.InputTuple,
      PubkeyChangedEvent.OutputTuple,
      PubkeyChangedEvent.OutputObject
    >;

    "TextChanged(bytes32,string,string)": TypedContractEvent<
      TextChangedEvent.InputTuple,
      TextChangedEvent.OutputTuple,
      TextChangedEvent.OutputObject
    >;
    TextChanged: TypedContractEvent<
      TextChangedEvent.InputTuple,
      TextChangedEvent.OutputTuple,
      TextChangedEvent.OutputObject
    >;
  };
}
