/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export interface ACLInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CREATE_PERMISSIONS_ROLE"
      | "EVMSCRIPT_REGISTRY_APP_ID"
      | "permissionParams"
      | "appId"
      | "getInitializationBlock"
      | "EVMSCRIPT_REGISTRY_APP"
      | "canPerform"
      | "EMPTY_PARAM_HASH"
      | "kernel"
      | "getExecutor"
      | "initialize"
      | "createPermission"
      | "grantPermission"
      | "grantPermissionP"
      | "revokePermission"
      | "setPermissionManager"
      | "getPermissionManager"
      | "hasPermission(address,address,bytes32)"
      | "hasPermission(address,address,bytes32,uint256[])"
      | "hasPermission(address,address,bytes32,bytes)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "SetPermission" | "ChangePermissionManager"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CREATE_PERMISSIONS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVMSCRIPT_REGISTRY_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permissionParams",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVMSCRIPT_REGISTRY_APP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [AddressLike, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "EMPTY_PARAM_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPermission",
    values: [AddressLike, AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPermission",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPermissionP",
    values: [AddressLike, AddressLike, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePermission",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionManager",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionManager",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission(address,address,bytes32)",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission(address,address,bytes32,uint256[])",
    values: [AddressLike, AddressLike, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission(address,address,bytes32,bytes)",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CREATE_PERMISSIONS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVMSCRIPT_REGISTRY_APP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVMSCRIPT_REGISTRY_APP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EMPTY_PARAM_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPermissionP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission(address,address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission(address,address,bytes32,uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission(address,address,bytes32,bytes)",
    data: BytesLike
  ): Result;
}

export namespace SetPermissionEvent {
  export type InputTuple = [
    entity: AddressLike,
    app: AddressLike,
    role: BytesLike,
    allowed: boolean
  ];
  export type OutputTuple = [
    entity: string,
    app: string,
    role: string,
    allowed: boolean
  ];
  export interface OutputObject {
    entity: string;
    app: string;
    role: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangePermissionManagerEvent {
  export type InputTuple = [
    app: AddressLike,
    role: BytesLike,
    manager: AddressLike
  ];
  export type OutputTuple = [app: string, role: string, manager: string];
  export interface OutputObject {
    app: string;
    role: string;
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ACL extends BaseContract {
  connect(runner?: ContractRunner | null): ACL;
  waitForDeployment(): Promise<this>;

  interface: ACLInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CREATE_PERMISSIONS_ROLE: TypedContractMethod<[], [string], "view">;

  EVMSCRIPT_REGISTRY_APP_ID: TypedContractMethod<[], [string], "view">;

  permissionParams: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [[bigint, bigint, bigint] & { id: bigint; op: bigint; value: bigint }],
    "view"
  >;

  appId: TypedContractMethod<[], [string], "view">;

  /**
   * @returns Block number in which the contract was initialized
   */
  getInitializationBlock: TypedContractMethod<[], [bigint], "view">;

  EVMSCRIPT_REGISTRY_APP: TypedContractMethod<[], [string], "view">;

  canPerform: TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, params: BigNumberish[]],
    [boolean],
    "view"
  >;

  EMPTY_PARAM_HASH: TypedContractMethod<[], [string], "view">;

  kernel: TypedContractMethod<[], [string], "view">;

  getExecutor: TypedContractMethod<[_script: BytesLike], [string], "view">;

  /**
   * Initialize can only be called once. It saves the block number in which it was initialized.
   * Initializes an ACL instance and sets `_permissionsCreator` as the entity that can create other permissions
   * @param _permissionsCreator Entity that will be given permission over createPermission
   */
  initialize: TypedContractMethod<
    [_permissionsCreator: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Creates a permission that wasn't previously set. Access is limited by the ACL.     If a created permission is removed it is possible to reset it with createPermission.
   * Create a new permission granting `_entity` the ability to perform actions of role `_role` on `_app` (setting `_manager` as the permission manager)
   * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
   * @param _entity Address of the whitelisted entity that will be able to perform the role
   * @param _manager Address of the entity that will be able to grant and revoke the permission further.
   * @param _role Identifier for the group of actions in app given access to perform
   */
  createPermission: TypedContractMethod<
    [
      _entity: AddressLike,
      _app: AddressLike,
      _role: BytesLike,
      _manager: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  /**
   * Grants permission if allowed. This requires `msg.sender` to be the permission manager
   * Grants `_entity` the ability to perform actions of role `_role` on `_app`
   * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
   * @param _entity Address of the whitelisted entity that will be able to perform the role
   * @param _role Identifier for the group of actions in app given access to perform
   */
  grantPermission: TypedContractMethod<
    [_entity: AddressLike, _app: AddressLike, _role: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager
   * Grants `_entity` the ability to perform actions of role `_role` on `_app`
   * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
   * @param _entity Address of the whitelisted entity that will be able to perform the role
   * @param _params Permission parameters
   * @param _role Identifier for the group of actions in app given access to perform
   */
  grantPermissionP: TypedContractMethod<
    [
      _entity: AddressLike,
      _app: AddressLike,
      _role: BytesLike,
      _params: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  /**
   * Revokes permission if allowed. This requires `msg.sender` to be the the permission manager
   * Revokes `_entity` the ability to perform actions of role `_role` on `_app`
   * @param _app Address of the app in which the role will be revoked
   * @param _entity Address of the whitelisted entity to revoke access from
   * @param _role Identifier for the group of actions in app being revoked
   */
  revokePermission: TypedContractMethod<
    [_entity: AddressLike, _app: AddressLike, _role: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * Sets `_newManager` as the manager of the permission `_role` in `_app`
   * @param _app Address of the app in which the permission management is being transferred
   * @param _newManager Address for the new manager
   * @param _role Identifier for the group of actions being transferred
   */
  setPermissionManager: TypedContractMethod<
    [_newManager: AddressLike, _app: AddressLike, _role: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * Get manager for permission
   * @param _app Address of the app
   * @param _role Identifier for a group of actions in app
   * @returns address of the manager for the permission
   */
  getPermissionManager: TypedContractMethod<
    [_app: AddressLike, _role: BytesLike],
    [string],
    "view"
  >;

  "hasPermission(address,address,bytes32)": TypedContractMethod<
    [_who: AddressLike, _where: AddressLike, _what: BytesLike],
    [boolean],
    "view"
  >;

  "hasPermission(address,address,bytes32,uint256[])": TypedContractMethod<
    [
      _who: AddressLike,
      _where: AddressLike,
      _what: BytesLike,
      _how: BigNumberish[]
    ],
    [boolean],
    "view"
  >;

  /**
   * Function called by apps to check ACL on kernel or to check permission statu
   * @param _how Permission parameters
   * @param _where Identifier for a group of actions in app
   * @param _who Sender of the original call
   * @returns boolean indicating whether the ACL allows the role or not
   */
  "hasPermission(address,address,bytes32,bytes)": TypedContractMethod<
    [_who: AddressLike, _where: AddressLike, _what: BytesLike, _how: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CREATE_PERMISSIONS_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EVMSCRIPT_REGISTRY_APP_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permissionParams"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [[bigint, bigint, bigint] & { id: bigint; op: bigint; value: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "appId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getInitializationBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EVMSCRIPT_REGISTRY_APP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "canPerform"
  ): TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, params: BigNumberish[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "EMPTY_PARAM_HASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "kernel"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getExecutor"
  ): TypedContractMethod<[_script: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_permissionsCreator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPermission"
  ): TypedContractMethod<
    [
      _entity: AddressLike,
      _app: AddressLike,
      _role: BytesLike,
      _manager: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantPermission"
  ): TypedContractMethod<
    [_entity: AddressLike, _app: AddressLike, _role: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantPermissionP"
  ): TypedContractMethod<
    [
      _entity: AddressLike,
      _app: AddressLike,
      _role: BytesLike,
      _params: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokePermission"
  ): TypedContractMethod<
    [_entity: AddressLike, _app: AddressLike, _role: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermissionManager"
  ): TypedContractMethod<
    [_newManager: AddressLike, _app: AddressLike, _role: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPermissionManager"
  ): TypedContractMethod<
    [_app: AddressLike, _role: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasPermission(address,address,bytes32)"
  ): TypedContractMethod<
    [_who: AddressLike, _where: AddressLike, _what: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasPermission(address,address,bytes32,uint256[])"
  ): TypedContractMethod<
    [
      _who: AddressLike,
      _where: AddressLike,
      _what: BytesLike,
      _how: BigNumberish[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasPermission(address,address,bytes32,bytes)"
  ): TypedContractMethod<
    [_who: AddressLike, _where: AddressLike, _what: BytesLike, _how: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "SetPermission"
  ): TypedContractEvent<
    SetPermissionEvent.InputTuple,
    SetPermissionEvent.OutputTuple,
    SetPermissionEvent.OutputObject
  >;
  getEvent(
    key: "ChangePermissionManager"
  ): TypedContractEvent<
    ChangePermissionManagerEvent.InputTuple,
    ChangePermissionManagerEvent.OutputTuple,
    ChangePermissionManagerEvent.OutputObject
  >;

  filters: {
    "SetPermission(address,address,bytes32,bool)": TypedContractEvent<
      SetPermissionEvent.InputTuple,
      SetPermissionEvent.OutputTuple,
      SetPermissionEvent.OutputObject
    >;
    SetPermission: TypedContractEvent<
      SetPermissionEvent.InputTuple,
      SetPermissionEvent.OutputTuple,
      SetPermissionEvent.OutputObject
    >;

    "ChangePermissionManager(address,bytes32,address)": TypedContractEvent<
      ChangePermissionManagerEvent.InputTuple,
      ChangePermissionManagerEvent.OutputTuple,
      ChangePermissionManagerEvent.OutputObject
    >;
    ChangePermissionManager: TypedContractEvent<
      ChangePermissionManagerEvent.InputTuple,
      ChangePermissionManagerEvent.OutputTuple,
      ChangePermissionManagerEvent.OutputObject
    >;
  };
}
