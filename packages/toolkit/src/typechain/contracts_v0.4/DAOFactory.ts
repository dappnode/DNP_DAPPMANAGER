/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export interface DAOFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "baseACL" | "regFactory" | "baseKernel" | "newDAO"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DeployDAO" | "DeployEVMScriptRegistry"
  ): EventFragment;

  encodeFunctionData(functionFragment: "baseACL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "regFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseKernel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newDAO", values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: "baseACL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "regFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseKernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newDAO", data: BytesLike): Result;
}

export namespace DeployDAOEvent {
  export type InputTuple = [dao: AddressLike];
  export type OutputTuple = [dao: string];
  export interface OutputObject {
    dao: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeployEVMScriptRegistryEvent {
  export type InputTuple = [reg: AddressLike];
  export type OutputTuple = [reg: string];
  export interface OutputObject {
    reg: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DAOFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DAOFactory;
  waitForDeployment(): Promise<this>;

  interface: DAOFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  baseACL: TypedContractMethod<[], [string], "view">;

  regFactory: TypedContractMethod<[], [string], "view">;

  baseKernel: TypedContractMethod<[], [string], "view">;

  /**
   * @param _root Address that will be granted control to setup DAO permissions
   */
  newDAO: TypedContractMethod<[_root: AddressLike], [string], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "baseACL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "regFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseKernel"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newDAO"
  ): TypedContractMethod<[_root: AddressLike], [string], "nonpayable">;

  getEvent(
    key: "DeployDAO"
  ): TypedContractEvent<
    DeployDAOEvent.InputTuple,
    DeployDAOEvent.OutputTuple,
    DeployDAOEvent.OutputObject
  >;
  getEvent(
    key: "DeployEVMScriptRegistry"
  ): TypedContractEvent<
    DeployEVMScriptRegistryEvent.InputTuple,
    DeployEVMScriptRegistryEvent.OutputTuple,
    DeployEVMScriptRegistryEvent.OutputObject
  >;

  filters: {
    "DeployDAO(address)": TypedContractEvent<
      DeployDAOEvent.InputTuple,
      DeployDAOEvent.OutputTuple,
      DeployDAOEvent.OutputObject
    >;
    DeployDAO: TypedContractEvent<
      DeployDAOEvent.InputTuple,
      DeployDAOEvent.OutputTuple,
      DeployDAOEvent.OutputObject
    >;

    "DeployEVMScriptRegistry(address)": TypedContractEvent<
      DeployEVMScriptRegistryEvent.InputTuple,
      DeployEVMScriptRegistryEvent.OutputTuple,
      DeployEVMScriptRegistryEvent.OutputObject
    >;
    DeployEVMScriptRegistry: TypedContractEvent<
      DeployEVMScriptRegistryEvent.InputTuple,
      DeployEVMScriptRegistryEvent.OutputTuple,
      DeployEVMScriptRegistryEvent.OutputObject
    >;
  };
}
