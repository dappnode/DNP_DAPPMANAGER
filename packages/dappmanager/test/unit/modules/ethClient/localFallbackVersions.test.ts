import "mocha";
import { expect } from "chai";
import {
  parseContentHashFile,
  loadContentHashes
} from "../../../../src/modules/ethClient/index.js";

describe("apm > localFallbackVersions", () => {
  describe("parseContentHashFile", () => {
    it("Should parse the file generated by the installer", () => {
      const data = `
geth.dnp.dappnode.eth,/ipfs/QmNqDvqAyy3pN3PvymB6chM7S1FgYyive8LosVKUuaDdfd
openethereum.dnp.dappnode.eth,/ipfs/QmbHRZTW9ubWUGp41wbCVnVXaUoUmyM9Tv689EvLbRTQCK
`;

      const expectedContentHashes = {
        "geth.dnp.dappnode.eth":
          "/ipfs/QmNqDvqAyy3pN3PvymB6chM7S1FgYyive8LosVKUuaDdfd",
        "openethereum.dnp.dappnode.eth":
          "/ipfs/QmbHRZTW9ubWUGp41wbCVnVXaUoUmyM9Tv689EvLbRTQCK"
      };

      const contentHashes = parseContentHashFile(data);

      expect(contentHashes).to.deep.equal(expectedContentHashes);
    });
  });

  describe("loadContentHashes", () => {
    it("Should not throw if the file does not exist", () => {
      const filepathNonExistant = "DNCORE/does-not-exist" + Math.random();
      const result = loadContentHashes(filepathNonExistant);
      expect(result).to.be.undefined;
    });
  });
});
