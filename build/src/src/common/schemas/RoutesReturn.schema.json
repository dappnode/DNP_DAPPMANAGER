{
  "type": "object",
  "properties": {
    "autoUpdateDataGet": {
      "$ref": "#/definitions/AutoUpdateDataView",
      "description": "Returns formated auto-update data"
    },
    "autoUpdateSettingsEdit": {
      "description": "Edits the auto-update settings",
      "type": "null"
    },
    "backupGet": {
      "description": "Generates a backup of a package and sends it to the client for download.",
      "type": "string"
    },
    "backupRestore": {
      "description": "Restores a backup of a package from the dataUri provided by the user",
      "type": "null"
    },
    "changeIpfsTimeout": {
      "description": "Used to test different IPFS timeout parameters live from the ADMIN UI.",
      "type": "null"
    },
    "cleanCache": {
      "description": "Cleans the cache files of the DAPPMANAGER:",
      "type": "null"
    },
    "copyFileFrom": {
      "description": "Copy file from a DNP and downloaded on the client",
      "type": "string"
    },
    "copyFileTo": {
      "description": "Copy file to a DNP:",
      "type": "null"
    },
    "deviceAdd": {
      "description": "Creates a new device with the provided id.\nGenerates certificates and keys needed for OpenVPN.",
      "type": "null"
    },
    "deviceCredentialsGet": {
      "$ref": "#/definitions/VpnDeviceCredentials",
      "description": "Creates a new OpenVPN credentials file, encrypted.\nThe filename is the (16 chars short) result of hashing the generated salt in the db,\nconcatenated with the device id."
    },
    "deviceRemove": {
      "description": "Removes the device with the provided id, if exists.",
      "type": "null"
    },
    "deviceReset": {
      "description": "Resets the device credentials with the provided id, if exists.",
      "type": "null"
    },
    "deviceAdminToggle": {
      "description": "Gives/removes admin rights to the provided device id.",
      "type": "null"
    },
    "devicesList": {
      "description": "Returns a list of the existing devices, with the admin property",
      "type": "array",
      "items": {
        "$ref": "#/definitions/VpnDevice"
      }
    },
    "diagnose": {
      "description": "Run system diagnose to inform the user",
      "type": "array",
      "items": {
        "$ref": "#/definitions/DiagnoseItem"
      }
    },
    "domainAliasSet": {
      "description": "Set a domain alias to a DAppNode package by name",
      "type": "null"
    },
    "ethClientFallbackSet": {
      "description": "Sets if a fallback should be used",
      "type": "null"
    },
    "ethClientTargetSet": {
      "description": "Changes the ethereum client used to fetch package data",
      "type": "null"
    },
    "fetchCoreUpdateData": {
      "$ref": "#/definitions/CoreUpdateData",
      "description": "Return formated core update data"
    },
    "fetchDirectory": {
      "description": "Fetch directory summary",
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "#/definitions/DirectoryItemOk"
          },
          {
            "$ref": "#/definitions/DirectoryItemLoading"
          },
          {
            "$ref": "#/definitions/DirectoryItemError"
          }
        ]
      }
    },
    "fetchDnpRequest": {
      "$ref": "#/definitions/RequestedDnp",
      "description": "Fetch extended info about a new DNP"
    },
    "getStats": {
      "$ref": "#/definitions/HostStats",
      "description": "Return host machine stats (cpu, memory, etc)"
    },
    "getUserActionLogs": {
      "description": "Returns the user action logs. This logs are stored in a different\nfile and format, and are meant to ease user support\nThe list is ordered from newest to oldest\n- Newest log has index = 0\n- If the param fromLog is out of bounds, the result will be an empty array: []",
      "type": "string"
    },
    "installPackage": {
      "description": "Installs a DAppNode Package.\nResolves dependencies, downloads release assets, loads the images to docker,\nsets userSettings and starts the docker container for each package.\n\nThe logId is the requested id. It is used for the UI to track the progress\nof the installation in real time and prevent double installs\n\nOptions\n- BYPASS_RESOLVER {bool}: Skips dappGet to only fetche first level dependencies\n- BYPASS_CORE_RESTRICTION {bool}: Allows unverified core DNPs (from IPFS)",
      "type": "null"
    },
    "listPackages": {
      "description": "Returns the list of current containers associated to packages",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PackageContainer"
      }
    },
    "logPackage": {
      "description": "Returns the logs of the docker container of a package",
      "type": "string"
    },
    "mountpointsGet": {
      "description": "Returns the list of current mountpoints in the host,\nby running a pre-written script in the host",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MountpointData"
      }
    },
    "newFeatureStatusSet": {
      "description": "Flag the UI welcome flow as completed",
      "type": "null"
    },
    "notificationsGet": {
      "description": "Returns not viewed notifications.\nUse an array as the keys are not known in advance and the array form\nis okay for RPC transport, as uniqueness is guaranteed",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PackageNotification"
      }
    },
    "notificationsRemove": {
      "description": "Marks notifications as view by deleting them from the db",
      "type": "null"
    },
    "notificationsTest": {
      "description": "Adds a notification to be shown the UI.\nSet the notification param to null for a random notification",
      "type": "null"
    },
    "packageDetailDataGet": {
      "$ref": "#/definitions/PackageDetailData",
      "description": "Get package detail information"
    },
    "packageGettingStartedToggle": {
      "description": "Toggles the visibility of a getting started block",
      "type": "null"
    },
    "passwordChange": {
      "description": "Changes the user `dappnode`'s password in the host machine\nOnly allows it if the current password has the salt `insecur3`",
      "type": "null"
    },
    "passwordIsSecure": {
      "description": "Checks if the user `dappnode`'s password in the host machine\nis NOT the insecure default set at installation time.\nIt does so by checking if the current salt is `insecur3`\n\n- This check will be run every time this node app is started\n   - If the password is SECURE it will NOT be run anymore\n     and this call will return true always\n   - If the password is INSECURE this check will be run every\n     time the admin requests it (on page load)",
      "type": "boolean"
    },
    "poweroffHost": {
      "description": "Shuts down the host machine via the DBus socket",
      "type": "null"
    },
    "rebootHost": {
      "description": "Reboots the host machine via the DBus socket",
      "type": "null"
    },
    "removePackage": {
      "description": "Remove a package and its data",
      "type": "null"
    },
    "requestChainData": {
      "description": "Requests chain data. Also instructs the DAPPMANAGER\nto keep sending data for a period of time (5 minutes)",
      "type": "null"
    },
    "restartPackage": {
      "description": "Calls docker rm and docker up on a package",
      "type": "null"
    },
    "restartPackageVolumes": {
      "description": "Removes a package volumes. The re-ups the package",
      "type": "null"
    },
    "seedPhraseSet": {
      "description": "Receives an encrypted message containing the seed phrase of\n12 word mnemonic ethereum account. The extra layer of encryption\nslightly increases the security of the exchange while the WAMP\nmodule works over HTTP.",
      "type": "null"
    },
    "setStaticIp": {
      "description": "Sets the static IP",
      "type": "null"
    },
    "systemInfoGet": {
      "$ref": "#/definitions/SystemInfo",
      "description": "Returns the current DAppNode system info"
    },
    "togglePackage": {
      "description": "Stops or starts after fetching its status",
      "type": "null"
    },
    "updatePackageEnv": {
      "description": "Updates the .env file of a package. If requested, also re-ups it",
      "type": "null"
    },
    "updatePortMappings": {
      "description": "Updates a package port mappings",
      "type": "null"
    },
    "volumeRemove": {
      "description": "Removes a docker volume by name",
      "type": "null"
    },
    "volumesGet": {
      "description": "Returns volume data",
      "type": "array",
      "items": {
        "$ref": "#/definitions/VolumeData"
      }
    }
  },
  "definitions": {
    "AutoUpdateDataView": {
      "description": "Full auto-update data:\n- settings: If auto-updates are enabled for a specific DNP or DNPs\n- registry: List of executed auto-updates\n- pending: Pending auto-update per DNP, can be already executed\n- dnpsToShow: Parsed data to be shown in the UI",
      "type": "object",
      "properties": {
        "settings": {
          "$ref": "#/definitions/AutoUpdateSettings"
        },
        "registry": {
          "$ref": "#/definitions/AutoUpdateRegistry"
        },
        "pending": {
          "$ref": "#/definitions/AutoUpdatePending"
        },
        "dnpsToShow": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutoUpdateDataDnpView"
          }
        }
      },
      "required": [
        "dnpsToShow",
        "pending",
        "registry",
        "settings"
      ]
    },
    "AutoUpdateSettings": {
      "description": "Sample:\n```\nsettings = {\n   \"system-packages\": { enabled: true }\n   \"my-packages\": { enabled: true }\n   \"bitcoin.dnp.dappnode.eth\": { enabled: false }\n}\n```",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "enabled"
        ]
      }
    },
    "AutoUpdateRegistry": {
      "description": "Sample:\n```\nregistry = {\n   \"core.dnp.dappnode.eth\": {\n     \"0.2.4\": { updated: 1563304834738, successful: true },\n     \"0.2.5\": { updated: 1563304834738, successful: false }\n   }, ...\n}\n```",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AutoUpdateRegistryDnp"
      }
    },
    "AutoUpdateRegistryDnp": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AutoUpdateRegistryEntry"
      }
    },
    "AutoUpdateRegistryEntry": {
      "type": "object",
      "properties": {
        "updated": {
          "type": "number"
        },
        "successful": {
          "type": "boolean"
        }
      }
    },
    "AutoUpdatePending": {
      "description": "Sample:\n```\npending = {\n   \"core.dnp.dappnode.eth\": {\n     version: \"0.2.4\",\n     firstSeen: 1563218436285,\n     scheduledUpdate: 1563304834738,\n     completedDelay: true\n   },\n... },\n```",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AutoUpdatePendingEntry"
      }
    },
    "AutoUpdatePendingEntry": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "firstSeen": {
          "type": "number"
        },
        "scheduledUpdate": {
          "type": "number"
        },
        "completedDelay": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "AutoUpdateDataDnpView": {
      "description": "Sample:\n```\ndnpsToShow = [{\n   id: \"system-packages\",\n   displayName: \"System packages\",\n   enabled: true,\n   feedback: {\n     updated: 15363818244,\n     manuallyUpdated: true,\n     inQueue: true,\n     scheduled: 15363818244\n   }\n}, ... ]\n```",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "feedback": {
          "$ref": "#/definitions/AutoUpdateFeedback"
        }
      },
      "required": [
        "displayName",
        "enabled",
        "feedback",
        "id"
      ]
    },
    "AutoUpdateFeedback": {
      "type": "object",
      "properties": {
        "inQueue": {
          "type": "boolean"
        },
        "manuallyUpdated": {
          "type": "boolean"
        },
        "scheduled": {
          "type": "number"
        },
        "updated": {
          "type": "number"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "VpnDeviceCredentials": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "filename",
        "key",
        "url"
      ]
    },
    "VpnDevice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "admin": {
          "type": "boolean"
        },
        "ip": {
          "type": "string"
        }
      },
      "required": [
        "admin",
        "id",
        "ip"
      ]
    },
    "DiagnoseItem": {
      "description": "Summary of diagnose checks performed by the DAppNode host",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "CoreUpdateData": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyListItem"
          }
        },
        "changelog": {
          "type": "string"
        },
        "updateAlerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestUpdateAlert"
          }
        },
        "versionId": {
          "type": "string"
        }
      },
      "required": [
        "available",
        "changelog",
        "packages",
        "updateAlerts",
        "versionId"
      ]
    },
    "DependencyListItem": {
      "description": "For fetch core update data",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "warningOnInstall": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "to"
      ]
    },
    "ManifestUpdateAlert": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "from",
        "message",
        "to"
      ]
    },
    "DirectoryItemOk": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "ok"
          ]
        },
        "description": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "isInstalled": {
          "type": "boolean"
        },
        "isUpdated": {
          "type": "boolean"
        },
        "featuredStyle": {
          "type": "object",
          "properties": {
            "featuredBackground": {
              "type": "string"
            },
            "featuredColor": {
              "type": "string"
            },
            "featuredAvatarFilter": {
              "type": "string"
            }
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "whitelisted": {
          "type": "boolean"
        },
        "isFeatured": {
          "type": "boolean"
        }
      },
      "required": [
        "avatarUrl",
        "categories",
        "description",
        "isFeatured",
        "isInstalled",
        "isUpdated",
        "name",
        "status",
        "whitelisted"
      ]
    },
    "DirectoryItemLoading": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "loading"
          ]
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "whitelisted": {
          "type": "boolean"
        },
        "isFeatured": {
          "type": "boolean"
        }
      },
      "required": [
        "isFeatured",
        "name",
        "status",
        "whitelisted"
      ]
    },
    "DirectoryItemError": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "error"
          ]
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "whitelisted": {
          "type": "boolean"
        },
        "isFeatured": {
          "type": "boolean"
        }
      },
      "required": [
        "isFeatured",
        "message",
        "name",
        "status",
        "whitelisted"
      ]
    },
    "RequestedDnp": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "reqVersion": {
          "type": "string"
        },
        "semVersion": {
          "type": "string"
        },
        "origin": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "setupSchema": {
          "$ref": "#/definitions/SetupSchemaAllDnps"
        },
        "setupTarget": {
          "$ref": "#/definitions/SetupTargetAllDnps"
        },
        "setupUiJson": {
          "$ref": "#/definitions/SetupUiJsonAllDnps"
        },
        "settings": {
          "$ref": "#/definitions/UserSettingsAllDnps"
        },
        "imageSize": {
          "type": "number"
        },
        "isUpdated": {
          "type": "boolean"
        },
        "isInstalled": {
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/PackageReleaseMetadata"
        },
        "specialPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecialPermission"
          }
        },
        "request": {
          "type": "object",
          "properties": {
            "compatible": {
              "type": "object",
              "properties": {
                "requiresCoreUpdate": {
                  "type": "boolean"
                },
                "resolving": {
                  "type": "boolean"
                },
                "isCompatible": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                },
                "dnps": {
                  "$ref": "#/definitions/CompatibleDnps"
                }
              },
              "required": [
                "dnps",
                "error",
                "isCompatible",
                "requiresCoreUpdate",
                "resolving"
              ]
            },
            "available": {
              "type": "object",
              "properties": {
                "isAvailable": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "isAvailable",
                "message"
              ]
            }
          },
          "required": [
            "available",
            "compatible"
          ]
        }
      },
      "required": [
        "avatarUrl",
        "imageSize",
        "isInstalled",
        "isUpdated",
        "metadata",
        "name",
        "reqVersion",
        "request",
        "semVersion",
        "settings",
        "specialPermissions"
      ]
    },
    "SetupSchemaAllDnps": {
      "type": "object",
      "additionalProperties": {}
    },
    "SetupTargetAllDnps": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/SetupTarget"
      }
    },
    "SetupTarget": {
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "environment"
                ]
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "portMapping"
                ]
              },
              "containerPort": {
                "type": "string"
              }
            },
            "required": [
              "containerPort",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "namedVolumeMountpoint"
                ]
              },
              "volumeName": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "volumeName"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "allNamedVolumesMountpoint"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "fileUpload"
                ]
              },
              "path": {
                "type": "string"
              }
            },
            "required": [
              "path",
              "type"
            ]
          }
        ]
      }
    },
    "SetupUiJsonAllDnps": {
      "type": "object",
      "additionalProperties": {}
    },
    "UserSettingsAllDnps": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/UserSettings"
      }
    },
    "UserSettings": {
      "type": "object",
      "properties": {
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "portMappings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "namedVolumeMountpoints": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "allNamedVolumeMountpoint": {
          "type": "string"
        },
        "fileUploads": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "domainAlias": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PackageReleaseMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "upstreamVersion": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "chain": {
          "type": "string"
        },
        "dependencies": {
          "$ref": "#/definitions/Dependencies"
        },
        "runOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requirements": {
          "type": "object",
          "properties": {
            "minimumDappnodeVersion": {
              "type": "string"
            }
          },
          "required": [
            "minimumDappnodeVersion"
          ]
        },
        "globalEnvs": {
          "type": "object",
          "properties": {
            "all": {
              "type": "boolean"
            }
          }
        },
        "backup": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageBackup"
          }
        },
        "changelog": {
          "type": "string"
        },
        "warnings": {
          "type": "object",
          "properties": {
            "onInstall": {
              "type": "string"
            },
            "onUpdate": {
              "type": "string"
            },
            "onReset": {
              "type": "string"
            },
            "onRemove": {
              "type": "string"
            }
          }
        },
        "updateAlerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestUpdateAlert"
          }
        },
        "disclaimer": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        "gettingStarted": {
          "type": "string"
        },
        "style": {
          "type": "object",
          "properties": {
            "featuredBackground": {
              "type": "string"
            },
            "featuredColor": {
              "type": "string"
            },
            "featuredAvatarFilter": {
              "type": "string"
            }
          }
        },
        "setupSchema": {},
        "setupUiJson": {},
        "setupTarget": {
          "$ref": "#/definitions/SetupTarget"
        },
        "author": {
          "type": "string"
        },
        "contributors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "links": {
          "type": "object",
          "properties": {
            "homepage": {
              "type": "string"
            },
            "ui": {
              "type": "string"
            },
            "api": {
              "type": "string"
            },
            "gateway": {
              "type": "string"
            }
          }
        },
        "repository": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "directory": {
              "type": "string"
            }
          }
        },
        "bugs": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            }
          },
          "required": [
            "url"
          ]
        },
        "license": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "version"
      ]
    },
    "Dependencies": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "PackageBackup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "path"
      ]
    },
    "SpecialPermission": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "details": {
          "type": "string"
        }
      },
      "required": [
        "details",
        "name"
      ]
    },
    "CompatibleDnps": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        },
        "required": [
          "to"
        ]
      }
    },
    "HostStats": {
      "description": "Host machine stats, cpu, memory, disk, etc",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "string"
        },
        "memory": {
          "type": "string"
        },
        "disk": {
          "type": "string"
        }
      }
    },
    "PackageContainer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "packageName": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "isDnp": {
          "type": "boolean"
        },
        "isCore": {
          "type": "boolean"
        },
        "created": {
          "type": "number"
        },
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/ContainerStatus"
        },
        "running": {
          "type": "boolean"
        },
        "manifest": {
          "$ref": "#/definitions/Manifest"
        },
        "envs": {
          "$ref": "#/definitions/PackageEnvs"
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortMapping"
          }
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeMapping"
          }
        },
        "defaultEnvironment": {
          "$ref": "#/definitions/PackageEnvs"
        },
        "defaultPorts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortMapping"
          }
        },
        "defaultVolumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeMapping"
          }
        },
        "dependencies": {
          "$ref": "#/definitions/Dependencies"
        },
        "avatarUrl": {
          "type": "string"
        },
        "origin": {
          "type": "string"
        },
        "chain": {
          "enum": [
            "bitcoin",
            "ethereum",
            "monero"
          ],
          "type": "string"
        },
        "domainAlias": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "canBeFullnode": {
          "type": "boolean"
        },
        "gettingStarted": {
          "type": "string"
        },
        "gettingStartedShow": {
          "type": "boolean"
        }
      },
      "required": [
        "avatarUrl",
        "created",
        "defaultEnvironment",
        "defaultPorts",
        "defaultVolumes",
        "dependencies",
        "id",
        "image",
        "isCore",
        "isDnp",
        "name",
        "packageName",
        "ports",
        "running",
        "shortName",
        "state",
        "version",
        "volumes"
      ]
    },
    "ContainerStatus": {
      "enum": [
        "created",
        "dead",
        "exited",
        "paused",
        "restarting",
        "running"
      ],
      "type": "string"
    },
    "Manifest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "upstreamVersion": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "chain": {
          "type": "string"
        },
        "dependencies": {
          "$ref": "#/definitions/Dependencies"
        },
        "runOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requirements": {
          "type": "object",
          "properties": {
            "minimumDappnodeVersion": {
              "type": "string"
            }
          },
          "required": [
            "minimumDappnodeVersion"
          ]
        },
        "globalEnvs": {
          "type": "object",
          "properties": {
            "all": {
              "type": "boolean"
            }
          }
        },
        "backup": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageBackup"
          }
        },
        "changelog": {
          "type": "string"
        },
        "warnings": {
          "type": "object",
          "properties": {
            "onInstall": {
              "type": "string"
            },
            "onUpdate": {
              "type": "string"
            },
            "onReset": {
              "type": "string"
            },
            "onRemove": {
              "type": "string"
            }
          }
        },
        "updateAlerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestUpdateAlert"
          }
        },
        "disclaimer": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        "gettingStarted": {
          "type": "string"
        },
        "style": {
          "type": "object",
          "properties": {
            "featuredBackground": {
              "type": "string"
            },
            "featuredColor": {
              "type": "string"
            },
            "featuredAvatarFilter": {
              "type": "string"
            }
          }
        },
        "setupSchema": {},
        "setupUiJson": {},
        "setupTarget": {
          "$ref": "#/definitions/SetupTarget"
        },
        "author": {
          "type": "string"
        },
        "contributors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "links": {
          "type": "object",
          "properties": {
            "homepage": {
              "type": "string"
            },
            "ui": {
              "type": "string"
            },
            "api": {
              "type": "string"
            },
            "gateway": {
              "type": "string"
            }
          }
        },
        "repository": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "directory": {
              "type": "string"
            }
          }
        },
        "bugs": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            }
          },
          "required": [
            "url"
          ]
        },
        "license": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "version"
      ]
    },
    "PackageEnvs": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "PortMapping": {
      "type": "object",
      "properties": {
        "ephemeral": {
          "type": "boolean"
        },
        "ip": {
          "type": "string"
        },
        "deletable": {
          "type": "boolean"
        },
        "host": {
          "type": "number"
        },
        "container": {
          "type": "number"
        },
        "protocol": {
          "$ref": "#/definitions/PortProtocol"
        }
      },
      "required": [
        "container",
        "protocol"
      ]
    },
    "PortProtocol": {
      "description": "==============\n==============\nDAPPMANAGER\n==============\n==============",
      "enum": [
        "TCP",
        "UDP"
      ],
      "type": "string"
    },
    "VolumeMapping": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "owner": {
          "type": "string"
        },
        "isOwner": {
          "type": "boolean"
        },
        "size": {
          "type": "number"
        },
        "host": {
          "type": "string"
        },
        "container": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "container",
        "host"
      ]
    },
    "MountpointData": {
      "type": "object",
      "properties": {
        "mountpoint": {
          "type": "string"
        },
        "use": {
          "type": "string"
        },
        "used": {
          "type": "number"
        },
        "total": {
          "type": "number"
        },
        "free": {
          "type": "number"
        },
        "vendor": {
          "type": "string"
        },
        "model": {
          "type": "string"
        }
      },
      "required": [
        "free",
        "model",
        "mountpoint",
        "total",
        "use",
        "used",
        "vendor"
      ]
    },
    "PackageNotification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/NotificationType"
        },
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        }
      },
      "required": [
        "body",
        "id",
        "title",
        "type"
      ]
    },
    "NotificationType": {
      "enum": [
        "danger",
        "success",
        "warning"
      ],
      "type": "string"
    },
    "PackageDetailData": {
      "type": "object",
      "properties": {
        "volumes": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "size": {
                "type": "string"
              },
              "devicePath": {
                "type": "string"
              },
              "mountpoint": {
                "type": "string"
              }
            },
            "required": [
              "devicePath"
            ]
          }
        }
      },
      "required": [
        "volumes"
      ]
    },
    "SystemInfo": {
      "description": "Aggregated DAppNode system info",
      "type": "object",
      "properties": {
        "versionData": {
          "$ref": "#/definitions/PackageVersionData"
        },
        "versionDataVpn": {
          "$ref": "#/definitions/PackageVersionData"
        },
        "ip": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "staticIp": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "upnpAvailable": {
          "type": "boolean"
        },
        "noNatLoopback": {
          "type": "boolean"
        },
        "alertToOpenPorts": {
          "type": "boolean"
        },
        "internalIp": {
          "type": "string"
        },
        "dappmanagerNaclPublicKey": {
          "type": "string"
        },
        "identityAddress": {
          "type": "string"
        },
        "ethClientTarget": {
          "anyOf": [
            {
              "enum": [
                "geth",
                "geth-light",
                "nethermind",
                "openethereum",
                "remote"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ethClientFallback": {
          "$ref": "#/definitions/EthClientFallback"
        },
        "ethClientStatus": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    true
                  ]
                },
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "ok",
                "url"
              ]
            },
            {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "code": {
                  "type": "string",
                  "enum": [
                    "UNKNOWN_ERROR"
                  ]
                },
                "error": {
                  "$ref": "#/definitions/ErrorSerialized"
                }
              },
              "required": [
                "code",
                "error",
                "ok"
              ]
            },
            {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "code": {
                  "type": "string",
                  "enum": [
                    "STATE_NOT_SYNCED"
                  ]
                }
              },
              "required": [
                "code",
                "ok"
              ]
            },
            {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "code": {
                  "type": "string",
                  "enum": [
                    "STATE_CALL_ERROR"
                  ]
                },
                "error": {
                  "$ref": "#/definitions/ErrorSerialized"
                }
              },
              "required": [
                "code",
                "error",
                "ok"
              ]
            },
            {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "code": {
                  "type": "string",
                  "enum": [
                    "IS_SYNCING"
                  ]
                }
              },
              "required": [
                "code",
                "ok"
              ]
            },
            {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "code": {
                  "type": "string",
                  "enum": [
                    "NOT_AVAILABLE"
                  ]
                },
                "error": {
                  "$ref": "#/definitions/ErrorSerialized"
                }
              },
              "required": [
                "code",
                "error",
                "ok"
              ]
            },
            {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "code": {
                  "type": "string",
                  "enum": [
                    "NOT_RUNNING"
                  ]
                }
              },
              "required": [
                "code",
                "ok"
              ]
            },
            {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "code": {
                  "type": "string",
                  "enum": [
                    "NOT_INSTALLED"
                  ]
                }
              },
              "required": [
                "code",
                "ok"
              ]
            },
            {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "code": {
                  "type": "string",
                  "enum": [
                    "INSTALLING"
                  ]
                }
              },
              "required": [
                "code",
                "ok"
              ]
            },
            {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "code": {
                  "type": "string",
                  "enum": [
                    "INSTALLING_ERROR"
                  ]
                },
                "error": {
                  "$ref": "#/definitions/ErrorSerialized"
                }
              },
              "required": [
                "code",
                "error",
                "ok"
              ]
            },
            {
              "type": "object",
              "properties": {
                "ok": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "code": {
                  "type": "string",
                  "enum": [
                    "UNINSTALLED"
                  ]
                }
              },
              "required": [
                "code",
                "ok"
              ]
            },
            {
              "type": "null"
            }
          ]
        },
        "ethProvider": {
          "type": "string"
        },
        "fullnodeDomainTarget": {
          "type": "string"
        },
        "newFeatureIds": {
          "type": "array",
          "items": {
            "enum": [
              "change-host-password",
              "repository",
              "repository-fallback",
              "system-auto-updates"
            ],
            "type": "string"
          }
        }
      },
      "required": [
        "alertToOpenPorts",
        "dappmanagerNaclPublicKey",
        "domain",
        "ethClientFallback",
        "ethClientTarget",
        "ethProvider",
        "fullnodeDomainTarget",
        "identityAddress",
        "internalIp",
        "ip",
        "name",
        "newFeatureIds",
        "noNatLoopback",
        "staticIp",
        "upnpAvailable",
        "versionData",
        "versionDataVpn"
      ]
    },
    "PackageVersionData": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        }
      }
    },
    "EthClientFallback": {
      "description": "If the DAPPMANAGER should use a eth remote node in cases of error syncing",
      "enum": [
        "off",
        "on"
      ],
      "type": "string"
    },
    "ErrorSerialized": {
      "description": "Serialized errors so the can be persisted in the db, a JSON to disk",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "stack": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "VolumeData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "nameDisplay": {
          "type": "string"
        },
        "ownerDisplay": {
          "type": "string"
        },
        "createdAt": {
          "type": "number"
        },
        "mountpoint": {
          "type": "string"
        },
        "fileSystem": {
          "$ref": "#/definitions/MountpointData"
        },
        "size": {
          "type": "number"
        },
        "refCount": {
          "type": "number"
        },
        "isOrphan": {
          "type": "boolean"
        }
      },
      "required": [
        "createdAt",
        "isOrphan",
        "mountpoint",
        "name"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}